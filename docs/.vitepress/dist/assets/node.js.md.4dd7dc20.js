import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.bf7c2cc3.js";const h=JSON.parse('{"title":"原生node.js","description":"","frontmatter":{},"headers":[],"relativePath":"node.js.md","filePath":"node.js.md","lastUpdated":1693998526000}'),p={name:"node.js.md"},o=l(`<h1 id="原生node-js" tabindex="-1">原生node.js <a class="header-anchor" href="#原生node-js" aria-label="Permalink to &quot;原生node.js&quot;">​</a></h1><h2 id="规范化" tabindex="-1">规范化 <a class="header-anchor" href="#规范化" aria-label="Permalink to &quot;规范化&quot;">​</a></h2><h3 id="commonjs-规范" tabindex="-1">CommonJS 规范 <a class="header-anchor" href="#commonjs-规范" aria-label="Permalink to &quot;CommonJS 规范&quot;">​</a></h3><h4 id="引入-四种格式" tabindex="-1">引入(四种格式) <a class="header-anchor" href="#引入-四种格式" aria-label="Permalink to &quot;引入(四种格式)&quot;">​</a></h4><ol><li>支持引入内置模块例如 <code>http</code> <code>os</code> <code>fs</code> <code>child_process</code> 等nodejs内置模块</li><li>支持引入第三方模块<code>express</code> <code>md5</code> <code>koa</code> 等</li><li>支持引入自己编写的模块 ./ ../ 等</li><li>支持引入addon C++扩展模块 .node文件</li></ol><div class="language-JavaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;node:fs&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 导入核心模块 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 导入 node_modules 目录下的模块 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./myModule.js&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 导入相对路径下的模块 </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nodeModule</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./myModule.node&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 导入扩展模块</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fs</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;node:fs&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 导入核心模块 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">express</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 导入 node_modules 目录下的模块 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">myModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./myModule.js&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 导入相对路径下的模块 </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nodeModule</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./myModule.node&#39;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 导入扩展模块</span></span></code></pre></div><h4 id="导出-两种方式" tabindex="-1">导出(两种方式) <a class="header-anchor" href="#导出-两种方式" aria-label="Permalink to &quot;导出(两种方式)&quot;">​</a></h4><ol><li>exports导出模块</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">module.exports = { </span></span>
<span class="line"><span style="color:#e1e4e8;">	hello: function() { </span></span>
<span class="line"><span style="color:#e1e4e8;">		console.log(&#39;Hello, world!&#39;); </span></span>
<span class="line"><span style="color:#e1e4e8;">	} </span></span>
<span class="line"><span style="color:#e1e4e8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">module.exports = { </span></span>
<span class="line"><span style="color:#24292e;">	hello: function() { </span></span>
<span class="line"><span style="color:#24292e;">		console.log(&#39;Hello, world!&#39;); </span></span>
<span class="line"><span style="color:#24292e;">	} </span></span>
<span class="line"><span style="color:#24292e;">};</span></span></code></pre></div><ol start="2"><li>module.exports导出值</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">module.exports = 123</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">module.exports = 123</span></span></code></pre></div><h3 id="esm模块规范" tabindex="-1">ESM模块规范 <a class="header-anchor" href="#esm模块规范" aria-label="Permalink to &quot;ESM模块规范&quot;">​</a></h3><p><strong>引入模块==import==必须写在头部</strong></p><blockquote><p>使用ESM模块时需要将package.json的type设置为type:module</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> fs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;node:fs&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> fs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;node:fs&#39;</span></span></code></pre></div><blockquote><p>如果引入json文件时需要特殊处理，需要增加断言并且指定类型json，node低版本不支持。</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./data.json&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> { type : </span><span style="color:#9ECBFF;">&quot;json&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">conselo.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./data.json&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> { type : </span><span style="color:#032F62;">&quot;json&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">conselo.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data)</span></span></code></pre></div><blockquote><p>加载模块的所有对象</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> all </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx.js&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> all </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx.js&#39;</span></span></code></pre></div><blockquote><p>动态导入模块</p></blockquote><p>import静态加载不支持掺杂在逻辑中，如果想动态加载请使用import函数模式</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./test.js&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;./test.js&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><blockquote><p>模块导出</p></blockquote><ol><li>导出一个默认对象</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	name : </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//default只能有一个不可重复export default</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	name : </span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//default只能有一个不可重复export default</span></span></code></pre></div><ol start="2"><li>导出变量</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre></div><h2 id="全局变量" tabindex="-1">全局变量 <a class="header-anchor" href="#全局变量" aria-label="Permalink to &quot;全局变量&quot;">​</a></h2><h3 id="nodejs内置全局api" tabindex="-1">nodeJS内置全局api <a class="header-anchor" href="#nodejs内置全局api" aria-label="Permalink to &quot;nodeJS内置全局api&quot;">​</a></h3><h4 id="_1-当前模块所在-目录-的绝对路径" tabindex="-1">1. 当前模块所在==目录==的绝对路径 <a class="header-anchor" href="#_1-当前模块所在-目录-的绝对路径" aria-label="Permalink to &quot;1. 当前模块所在==目录==的绝对路径&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__dirname</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__dirname</span></span></code></pre></div><h4 id="_2-当前模块-文件-的绝对路径-包括文件名和文件拓展名" tabindex="-1">2. 当前模块==文件==的绝对路径，包括文件名和文件拓展名 <a class="header-anchor" href="#_2-当前模块-文件-的绝对路径-包括文件名和文件拓展名" aria-label="Permalink to &quot;2. 当前模块==文件==的绝对路径，包括文件名和文件拓展名&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">__filename</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">__filename</span></span></code></pre></div><h4 id="_3-引入模块和导出模块" tabindex="-1">3. 引入模块和导出模块 <a class="header-anchor" href="#_3-引入模块和导出模块" aria-label="Permalink to &quot;3. 引入模块和导出模块&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">require </span><span style="color:#79B8FF;">module</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">require </span><span style="color:#005CC5;">module</span></span></code></pre></div><h4 id="_4-process对象" tabindex="-1">4. process对象 <a class="header-anchor" href="#_4-process对象" aria-label="Permalink to &quot;4. process对象&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">process.argv</span></span>
<span class="line"><span style="color:#6A737D;">//这是一个包含命令行参数的数组。第一个元素是Node.js的执行路径，第二个元素是当前执行的JavaScript文件的路径，之后的元素是传递给脚本的命令行参数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">p<wbr>rocess.env</span></span>
<span class="line"><span style="color:#6A737D;">//这是一个包含当前环境变量的对象。您可以通过\`p<wbr>rocess.env\`访问并操作环境变量。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">//这个方法返回当前工作目录的路径。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(event, listener)</span></span>
<span class="line"><span style="color:#6A737D;">//用于注册事件监听器。您可以使用\`process.on\`监听诸如\`exit\`、\`uncaughtException\`等事件，并在事件发生时执行相应的回调函数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">([code])</span></span>
<span class="line"><span style="color:#6A737D;">//用于退出当前的Node.js进程。您可以提供一个可选的退出码作为参数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">process.pid</span></span>
<span class="line"><span style="color:#6A737D;">//这个属性返回当前进程的PID（进程ID）。</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">process</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">process.argv</span></span>
<span class="line"><span style="color:#6A737D;">//这是一个包含命令行参数的数组。第一个元素是Node.js的执行路径，第二个元素是当前执行的JavaScript文件的路径，之后的元素是传递给脚本的命令行参数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">p<wbr>rocess.env</span></span>
<span class="line"><span style="color:#6A737D;">//这是一个包含当前环境变量的对象。您可以通过\`p<wbr>rocess.env\`访问并操作环境变量。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6A737D;">//这个方法返回当前工作目录的路径。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(event, listener)</span></span>
<span class="line"><span style="color:#6A737D;">//用于注册事件监听器。您可以使用\`process.on\`监听诸如\`exit\`、\`uncaughtException\`等事件，并在事件发生时执行相应的回调函数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">([code])</span></span>
<span class="line"><span style="color:#6A737D;">//用于退出当前的Node.js进程。您可以提供一个可选的退出码作为参数。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">process.pid</span></span>
<span class="line"><span style="color:#6A737D;">//这个属性返回当前进程的PID（进程ID）。</span></span></code></pre></div><p>这些只是<code>process</code>对象的一些常用属性和方法，还有其他许多属性和方法可用于监控进程、设置信号处理、发送IPC消息等。</p><p>需要注意的是，<code>process</code>对象是一个全局对象，可以在任何模块中直接访问，无需导入或定义。</p><h4 id="_5-buffer对象" tabindex="-1">5. Buffer对象 <a class="header-anchor" href="#_5-buffer对象" aria-label="Permalink to &quot;5. Buffer对象&quot;">​</a></h4><p><code>Buffer</code>类在处理文件、网络通信、加密和解密等操作中非常有用，尤其是在需要处理二进制数据时</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Buffer</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Buffer</span></span></code></pre></div><h6 id="创建buffer实例" tabindex="-1">创建<code>Buffer</code>实例 <a class="header-anchor" href="#创建buffer实例" aria-label="Permalink to &quot;创建\`Buffer\`实例&quot;">​</a></h6><ul><li><p>Buffer.alloc(size[, fill[, encoding]]) 创建一个指定大小的新的<code>Buffer</code>实例，初始内容为零。<code>fill</code>参数可用于填充缓冲区，<code>encoding</code>参数指定填充的字符编码。</p></li><li><p>Buffer.from(array) 创建一个包含给定数组的<code>Buffer</code>实例。</p></li><li><p>Buffer.from(string[, encoding]) 创建一个包含给定字符串的<code>Buffer</code>实例。</p></li></ul><h6 id="读取和写入数据" tabindex="-1">读取和写入数据 <a class="header-anchor" href="#读取和写入数据" aria-label="Permalink to &quot;读取和写入数据&quot;">​</a></h6><ul><li><p>buffer[index] 通过索引读取或写入<code>Buffer</code>实例中的特定字节。</p></li><li><p>buffer.length 获取<code>Buffer</code>实例的字节长度。</p></li><li><p>buffer.toString([encoding[, start[, end]]]) 将<code>Buffer</code>实例转换为字符串。</p></li></ul><h6 id="转换数据" tabindex="-1">转换数据 <a class="header-anchor" href="#转换数据" aria-label="Permalink to &quot;转换数据&quot;">​</a></h6><ul><li><p>buffer.toJSON( ) 将<code>Buffer</code>实例转换为JSON对象。</p></li><li><p>buffer.slice([start[, end]]) 返回一个新的<code>Buffer</code>实例，其中包含原始<code>Buffer</code>实例的部分内容。</p></li></ul><h6 id="其他方法" tabindex="-1">其他方法 <a class="header-anchor" href="#其他方法" aria-label="Permalink to &quot;其他方法&quot;">​</a></h6><ul><li><p>Buffer.isBuffer(obj) 检查一个对象是否是<code>Buffer</code>实例。</p></li><li><p>Buffer.concat(list[, totalLength]) 将一组<code>Buffer</code>实例或字节数组连接起来形成一个新的<code>Buffer</code>实例。</p></li></ul><h3 id="其他全局api" tabindex="-1">其他全局API <a class="header-anchor" href="#其他全局api" aria-label="Permalink to &quot;其他全局API&quot;">​</a></h3><blockquote><p>由于nodejs中没有DOM和BOM，除了这些API，其他的ECMAscriptAPI基本都能用</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">setTimeout </span></span>
<span class="line"><span style="color:#E1E4E8;">setInterval </span></span>
<span class="line"><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">Math  </span></span>
<span class="line"><span style="color:#E1E4E8;">console  </span></span>
<span class="line"><span style="color:#E1E4E8;">Date </span></span>
<span class="line"><span style="color:#E1E4E8;">fetch</span><span style="color:#6A737D;">//(node v18) </span></span>
<span class="line"><span style="color:#E1E4E8;">等</span><span style="color:#F97583;">...</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">setTimeout </span></span>
<span class="line"><span style="color:#24292E;">setInterval </span></span>
<span class="line"><span style="color:#005CC5;">Promise</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">Math  </span></span>
<span class="line"><span style="color:#24292E;">console  </span></span>
<span class="line"><span style="color:#24292E;">Date </span></span>
<span class="line"><span style="color:#24292E;">fetch</span><span style="color:#6A737D;">//(node v18) </span></span>
<span class="line"><span style="color:#24292E;">等</span><span style="color:#D73A49;">...</span></span></code></pre></div>`,53),e=[o];function c(t,r,i,d,y,E){return a(),n("div",null,e)}const v=s(p,[["render",c]]);export{h as __pageData,v as default};
